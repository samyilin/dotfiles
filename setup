#!/bin/sh

# Sets up bash profile, vimrc and more. Always WIP.
dir=$(cd -- "$(dirname -- "$0")">>/dev/null 2>&1 && pwd)
# Helper to determine if a certain required program is missing from user
# setup. Checks if the command/program exists and is an executable.
# This is more POSIX compliant than "which" or "type" in shell scripts.
has() {
  command -v "$1" >>/dev/null 2>&1 && test -x "$(command -v "$1")" >>/dev/null 2>&1 && return 0 || return 1; 
}
# function to setup bash.
setup_bash() {
  # quit if bash is not installed
  if ! has bash; then
    echo "Bash is not installed or not present in /bin/bash, skipping bash setup"
  fi
  if [ -f "$HOME"/.bashrc ] && [ ! -L "$HOME"/.bashrc ]; then
    # add the sourcing line to default .bashrc if not there already
    case $(grep -Fx "test -f $HOME/.bashrc.personal && . $HOME/.bashrc.personal" "$HOME/.bashrc" >/dev/null; echo $?) in
      0)
        echo "bashrc already exists and is setup already"
        ;;
      1)
        echo "test -f $HOME/.bashrc.personal && . $HOME/.bashrc.personal" >> "$HOME"/.bashrc
        # code if not found
        ;;
      *)
        echo "Unknown error, check if grep is installed."
        # code if an error occurred
        ;;
    esac
  elif [ ! -f "$HOME"/.bashrc ]; then
    # if no bashrc exists right now,  copy and paste .bashrc.default to
    # .bashrc. This .bashrc is a placeholder, so no symlink is necessary.
    # Plus, we want this .bashrc to be written to by other programs, so
    # symlinking would lead to master copy (although a placeholder) to be
    # polluted when we commit.
    # bashrc
    cp "$PWD"/.bashrc.default "$HOME"/.bashrc
  fi
  ln -sf "$PWD/.bashrc.personal" "$HOME/.bashrc.personal"
  echo ".bashrc setup complete."
  if [ -f "$HOME"/.bash_profile ] && [ ! -L "$HOME"/.bash_profile ]; then
    case $(grep -Fx ". $HOME/.profile" "$HOME/.bash_profile" >/dev/null; echo $?) in
      0)
        echo ".bash_profile already exists and is setup already"
        ;;
      1)
        echo ". $HOME/.profile" >> "$HOME"/.bash
        # code if not found
        ;;
      *)
        echo "Unknown error, check if grep is installed."
        # code if an error occurred
        ;;
    esac
  elif [ ! -f "$HOME"/.bash_profile ]; then
    cp "$PWD"/.bash_profile "$HOME"/.bash_profile.bak
  fi
  echo ".bash_profile is setup."

}

# setup .profile. Chances are, you would at least want to set up
# .profile.
setup_profile() {
  if [ -f "$HOME"/.profile ]; then
    echo ".profile exists and doesn't need to be added again."
  else
    if [ ! -f "$HOME"/.profile ]; then
      cp "$PWD/.profile.default" "$HOME/.profile"
    fi
  fi
  if [ -f "$HOME"/.inputrc ] && [ ! -L "$HOME"/.inputrc ]; then
    mv "$HOME"/.inputrc "$HOME"/.inputrc.bak
    echo "your default .inputrc is backed up at $HOME/.inputrc.bak"
  fi
  ln -sf "$PWD/.inputrc.personal" "$HOME/.inputrc"
}

# Other setups exist in their own folders. This is just a wrapper to
# call other setup scripts.
setup_others() {
  echo "Initializing $1 setup"
  sleep 1
  if has "$1"; then
    # special logic to handle vim full version.
    if [ "$1" = vim ]; then
      if ! has vimtutor; then
        echo "Full vim is not installed, quitting vim setup"
        return 1
      fi
    fi
    cd "$1" && ./setup && echo "$1 setup complete, proceeding to next step"
    cd "$dir" || return 1
  else
    echo "$1 is not installed in the system, setup skipped."
    return 0
  fi
}
main() {
  for i in grep git; do
    if ! has $i; then
      echo "$1 is not installed in the system, setup failed"
    fi
  done
  if [ $# -eq 0 ]; then
    setup_bash
    setup_profile
    for i in vim tmux git; do
      setup_others $i
    done
  else
    while [ $# -gt 0 ]; do
      case $1 in 
        bash) setup_bash;;
        profile) setup_profile;;
        vim) setup_others vim;;
        git) setup_others git;;
        tmux) setup_others tmux;;
        *) echo "Invalid $1 command line argument given."
          exit 1
          ;;
      esac
      shift
    done
  fi
}

main "$@"

echo "Please read dotfiles/install/nix for nix specific instructions if needed."
echo "There're two ways to set up nix, hence why nix setup is not automated."
sleep 1
echo "Setup complete, thank you for using this script. "
exit 0
